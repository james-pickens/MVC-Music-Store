# This is a basic workflow to help you get started with Actions

name: Build Windows Container Image

# Controls when the action will run. 
on:
  # Triggers the workflow on push or pull request events but only for the master branch
  push:
    branches: [ post-containerisation ]
  pull_request:
    branches: [ post-containerisation ]

  # Allows you to run this workflow manually from the Actions tab
  workflow_dispatch:
    branches: [ post-containerisation ]
    
env:
  imageRepository: 'mvmusicstoreweb'
  dockerfilePath: './MvcMusicStore-Completed/MvcMusicStore/Dockefile'
  tag: '${{ github.run_id  }}'
  USER: ${{ secrets.ACR_USER }}
  TOKEN: ${{ secrets.ACR_SECRET }}
  REPOSITORY: ${{ secrets.ACR_TENANT }}

# A workflow run is made up of one or more jobs that can run sequentially or in parallel
jobs:
  # This workflow contains a single job called "build"
  build-and-deploy-to-azure:
    # The type of runner that the job will run on
    runs-on: windows-latest

    # Steps represent a sequence of tasks that will be executed as part of the job
    steps:
      # Checks-out your repository under $GITHUB_WORKSPACE, so your job can access it
      - uses: actions/checkout@v2
    
      - name: Build and push an image to container registry
	working-directory: .
	run: |
          docker login $env:REPOSITORY -u $env:USER -p $env:TOKEN
          docker build --file=$env:dockerfilePath -t ${{ secrets.ACR_TENANT }}/${{ secrets.IMAGE_NAME }}:$env:tag .
          docker image push ${{ secrets.ACR_TENANT }}/${{ secrets.IMAGE_NAME }}:$env:tag
          docker logout
        env:

